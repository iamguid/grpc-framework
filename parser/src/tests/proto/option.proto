syntax = "proto3";

import "google/protobuf/descriptor.proto";

// extend google.protobuf.FileOptions {
//   string my_file_option = 50000 [ optional = true ];
//   string my_file_option_2 = 50001 [ optional = true ];
// }
// extend google.protobuf.MessageOptions {
//   int32 my_message_option = 50002 [ optional = true ];
// }
// extend google.protobuf.FieldOptions {
//   float my_field_option = 50003 [ optional = true ];
// }
// extend google.protobuf.EnumOptions {
//   bool my_enum_option = 50004 [ optional = true ];
// }
// extend google.protobuf.EnumValueOptions {
//   uint32 my_enum_value_option = 50005 [ optional = true ];
// }
// extend google.protobuf.ServiceOptions {
//   MyEnum my_service_option = 50006 [ optional = true ];
// }
// extend google.protobuf.MethodOptions {
//   MyMessage my_method_option = 50007 [ optional = true ];
// }

option my_file_option_1 = "Test";
option my_file_option_2.nested1.nested2 = 4.5;
option (my_file_option_3) = -1.2;
option (my_file_option_4).nested = true;
option (my_file_option_5.nested1).nested2 = -5;

option my_file_option_6 = { 
    nested1: true
    nested2: some.test
};

option my_file_option_7 = { nested1: "SomeValue" nested2: "some value" };

message MyMessage {
  option (my_message_option) = 1234;

  int32 foo = 1 [(my_field_option) = 4.5];
  string bar = 2;
}

enum MyEnum {
  option (my_enum_option) = true;

  FOO = 1 [(my_enum_value_option) = 321];
  BAR = 2;
}

message RequestType {}
message ResponseType {}

service MyService {
  option (my_service_option) = FOO;
  option (my_service_option_map) = {
    foo: "bar"
  };

  rpc MyMethod(RequestType) returns(ResponseType) {
    // Note:  my_method_option has type MyMessage.  We can set each field
    //   within it using a separate "option" line.
    option (my_method_option).foo = 567;
    option (my_method_option).bar = "Some string";
    option (my_method_option).abc = false;
  }
}

message FooOptions {
  int32 opt1 = 1;
  string opt2 = 2;
}

extend google.protobuf.FieldOptions {
 option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["uuid", "int64_value", "double_value"]
      required: ["int32_value", "single_value"]
    }
  };
  FooOptions foo_options = 1234;
}

// usage:
message Bar {
  int32 a = 1 [(foo_options).opt1 = 123, (foo_options).opt2 = "baz"];
  // alternative aggregate syntax (uses TextFormat):
  int32 b = 2 [(foo_options) = { opt1: 123 opt2: "baz" }];
}
